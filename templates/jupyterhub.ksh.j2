#/bin/ksh

#################
Usage()
#################
{

clear
cat << !FIN


DESCRIPTION

        Script d exploitation du produit Jupyterhub

OPTIONS
                start   Lancement de Jupyterhub

                stop    ArrÃªt de Jupyterhub

                status  Diagnostique de Jupyterhub

                restart Relance Jupyterhub

                help    Afficher l aide

!FIN

exit 1

}

#################
PID_Jupyter_proxy()
#################
{

pidJupyterProxy=`ps -ef | grep -v "grep" | grep "${PROCESS_NAME_JUPYTER_PROXY}" | awk '{print $2}'`
[[ -z ${pidJupyterProxy} ]] && pidJupyterProxy="0"

echo "${pidJupyterProxy}"

}

#################
PID_Jupyter_Hub()
#################
{

pidJupyterHub=`ps -ef | grep -v "grep" | grep "${PROCESS_NAME_JUPYTER_HUB}" | awk '{print $2}'`
[[ -z ${pidJupyterHub} ]] && pidJupyterHub="0"

echo "${pidJupyterHub}"

}

#################
Start_Jupyter()
#################
{

pidJupyterProxy=$( PID_Jupyter_proxy )

pidJupyterHub=$( PID_Jupyter_Hub )

if [ "${pidJupyterProxy}" == "0" ] && [ "${pidJupyterHub}" == "0" ]
then
	nohup ${PROCESS_NAME_JUPYTER_HUB} > ${JUPYTER_SCRIPT_LOG} &
        echo "Jupyter Hub is starting ..."
	echo "You have to launch the user's server on admin interface"
elif [ "${pidJupyterProxy}" == "0" ] || [ "${pidJupyterHub}" == "0" ]
then
        Stop_Jupyter
        Start_Jupyter
else
	echo "Jupyter Hub is already started"
fi

}

#################
Stop_Jupyter()
#################
{

pidJupyterProxy=$( PID_Jupyter_proxy )

pidJupyterHub=$( PID_Jupyter_Hub )

if [ "${pidJupyterProxy}" == "0" ] && [ "${pidJupyterHub}" == "0" ]
then
	echo "Jupyter is already stopped"
	exit
else
	if [ "${pidJupyterProxy}" != "0" ]
	then
		kill ${pidJupyterProxy}
		echo "Jupyter's Proxy is stopped"
	fi

	if  [ "${pidJupyterHub}" != "0" ]
	then
		kill ${pidJupyterHub}
		echo "Jupyter Hub is stopped"
	fi
fi

}

#################
Status_Jupyter()
#################
{

pidJupyterProxy=$( PID_Jupyter_proxy )

pidJupyterHub=$( PID_Jupyter_Hub )

if [ "${pidJupyterProxy}" == "0" ] && [ "${pidJupyterHub}" == "0" ]
then
        echo "Jupyter is stopped"
	return 1
else
	if [ "${pidJupyterProxy}" == "0" ] && [ "${pidJupyterHub}" != "0" ] 
	then
		echo "Jupyter's proxy isn't running but Jupyter Hub is running"
		echo "You can restart Jupyter's proxy with the command : $0 restart"
		return 2
	elif [ "${pidJupyterProxy}" != "0" ] && [ "${pidJupyterHub}" == "0" ]
	then
		echo "Jupyter Hub isn't running but Jupyter's proxy is running"
		echo "You can restart Jupyter Hub with the command : $0 restart"
		return 3
	else
		echo "Jupyter Hub is running"
		echo "PID Jupyter's Proxy : ${pidJupyterProxy}"
		echo "PID Jupyter Hub : ${pidJupyterHub}"
		return 0
	fi
fi

}

JUPYTER_HOME="{{ role_jupyterhub_install_dir }}"
JUPYTER_CONF_FILE="{{ role_jupyterhub_conf_file }}"
JUPYTER_SCRIPT_LOG="{{ role_jupyterhub_log_file }}"
PATH_ENV_PYTHON_36_BIN="{{ role_jupyterhub_anaconda_parent_dir }}/{{ role_jupyterhub_anaconda_dir_name }}/envs/py36_jupyter/bin"
PATH_PYTHON="${PATH_ENV_PYTHON_36_BIN}/python"
PATH_JUPYTERHUB="${PATH_ENV_PYTHON_36_BIN}/jupyterhub"
PATH_JUPYTER_PROXY="${PATH_ENV_PYTHON_36_BIN}/configurable-http-proxy"
PROCESS_NAME_JUPYTER_HUB="${PATH_PYTHON} ${PATH_JUPYTERHUB} -f ${JUPYTER_CONF_FILE}"
PROCESS_NAME_JUPYTER_PROXY="node ${PATH_JUPYTER_PROXY}"

if [ $# != 1 ]
then
        Usage
fi

case "$1" in 
	start|START) 		Start_Jupyter ; sleep 2 ; Status_Jupyter ;;
	stop|STOP) 		Stop_Jupyter ; sleep 2 ; Status_Jupyter ;;
	restart|RESTART)	Stop_Jupyter ; sleep  2 ; Status_Jupyter ; Start_Jupyter ; sleep 2 ; Status_Jupyter ;;
	status|STATUS) 		Status_Jupyter ;; 
	*) Usage ;;
esac

